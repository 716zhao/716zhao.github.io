<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FATE</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-04T05:47:06.476Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>716Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://example.com/2021/10/28/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/10/28/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-28T11:46:15.000Z</published>
    <updated>2021-11-04T05:47:06.476Z</updated>
    
    <content type="html"><![CDATA[<p>第一章：Spring框架概述：<br>  1.目的：Spring是为了解决繁琐的软件开发而创建的。</p><p>  2.作用：解耦合，方便测试，集成框架，降低API(对JDBC等进行封装)开发难度。</p><p>  3.特点：Spring不同于Struts、Hibernate等单层框架，它可以糅合多个框架，将多个单层框架建立成一个连贯的整体，Spring提供了一个更完善的开发环境。</p><p>  4.概述：轻量级(Jar包数量少)的，开源的JavaEE框架。</p><p>  5.核心组成部分：IOC和Aop<br>     (1)IOC:控制反转，把创建的对象过程交给Spring进行管理。<br>     (2)Aop:面向切面，在不修改源代码的情况下添加或修改功能。<br>  参考文献:<a href="https://baike.so.com/doc/6841943-7059231.html">https://baike.so.com/doc/6841943-7059231.html</a></p><hr><p>第二章：IOC容器</p><ol><li><p>什么是IOC：控制反转，把对象的创建和对象的调用过程，交给Spring管理.</p></li><li><p>IOC底层原理：<br>（1）xml解析、工厂模式、反射</p></li><li><p>IOC过程：<br>（例子：）<br>第一步   xml配置文件，配置创建的对象<br>   <bean id = "dao" class = "com.atguigu.UserDao"></bean><br>第二步   有service类和dao类，创建工厂类<br>   calss UserFactory{</p><pre><code>     public static UserDao getDao&#123;     String classvalue = class属性值        //xml解析  ---&gt; 得到的结果为这个类的地址     Class clazz = Class.forName(classValue);        //通过反射创建对象     return (UserDao) clazz = clazz.newIstance();                             &#125;</code></pre><p>   }</p></li></ol><p><img src="Spring%E6%88%AA%E5%9B%BE1.png"></p><pre><code>4.IOC(接口)1.IOC思想基于IOC容器完成，IOC容器底层就是对象工厂。（★）2.Spring提供两种方式实现IOC容器（两个接口）        （1）BeanFactory：IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用    ★加载配置文件时不创建对象，在使用对象时才去创建        （2）ApplicationContext：BeanFactory接口的子接口，提供更多功能，一般由开发人员进行使用    ★加载配置文件时就创建对象3.ApplicationContext的实现类：    1.FileSystemXmlApplicationContext参数是 带盘符的路径，绝对路径         2.ClassPathXmlApplicationContext参数是 src下的路径</code></pre><hr><p>第三章：IOC操作Bean管理<br>    1.什么是Bean管理<br>        ①Spring创建对象<br>        ②Spring属性注入</p><pre><code>2.两种Bean管理操作的实现方式    ①通过xml配置文件实现        1.创建对象：        （默认执行无参方法  ps:类中写了有参构造器不写无参构造器，默认没有无参构造器）        &lt;bean id = &quot;User&quot; class = &quot;con.atguigu.spring5.User&quot;&gt;&lt;/bean&gt;                2.属性注入：        DI(依赖注入)，是IOC的一种具体实现，即注入属性        两种注入方式：            ①.通过set方法注入（需要事先写好set方法）                    &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.testdemo.Book&quot;&gt;                            &lt;property name=&quot;bname&quot; value=&quot;康师傅&quot;&gt;&lt;/property&gt;                      &lt;/bean&gt;            通过property(属性)操作            ②.通过有参构造器注入                     &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt;                            &lt;constructor-arg name=&quot;bname&quot; value=&quot;美年达&quot;&gt;&lt;/constructor-arg&gt;                            &lt;constructor-arg name=&quot;bauthor&quot; value=&quot;百事可乐&quot;&gt;&lt;/constructor-arg&gt;                        &lt;constructor-arg index=&quot;?&quot; value=&quot;?&quot;&gt;&lt;/constructor-arg&gt;                    &lt;/bean&gt;            通过constructor-arg给属性赋值；不要无参构造器; 需要配置所有属性; 或者可以通过index选择为第?个属性赋值                                    ③.p名称空间注入（了解即可，也需要提前在类中写好set方法）                     第一步：在配置文件中添加p名称空间                      xmlns:p=&quot;http://www.springframework.org/schema/p&quot;                     第二步：注入属性                     &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot; p:bname=&quot;美年达&quot; p:bauthor=&quot;百事可乐&quot;&gt;&lt;/bean&gt;            也需要无参构造器        3.xml注入其他类型属性          1.字面量：             （1）null值            &lt;property name=&quot;美年达&quot;&gt;            &lt;null/&gt;            &lt;/property&gt;               (2)  属性值包含特殊符号（如想显示书名号等等）            1.转义符号lt...            2.CDATA            &lt;property name=&quot;饮料名&quot;&gt;            &lt;value=![CDATA&lt;&lt;百事可乐&gt;&gt;]&gt;&lt;/value&gt;            &lt;/property&gt;        4.注入属性-外部bean            例：Book类的方法需要调用User类的方法                 public void add1()&#123;                         System.out.println(&quot;hahaha&quot;);                       user.add();                    &#125;                   创建User为Book的属性                private User user；                   创建User的set方法                public void setUser(User user) &#123;                        this.user = user;                    &#125;                    配置文件：                &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt;                        &lt;property name=&quot;user&quot; ref=&quot;user&quot;&gt;&lt;/property&gt;                    &lt;/bean&gt;                    &lt;bean id=&quot;user&quot; class=&quot;com.atguigu.spring5.User&quot;&gt;&lt;/bean&gt;                &lt;/beans&gt;                     即可        5.注入属性-内部bean和级联赋值            ①内部bean配置文件编写格式：                 &lt;bean id=&quot;emp&quot; class=&quot;com.atguigu.spring5.Emp&quot;&gt;                        &lt;property name=&quot;gender&quot; value=&quot;男&quot;&gt;&lt;/property&gt;                        &lt;property name=&quot;ename&quot; value=&quot;Jack&quot;&gt;&lt;/property&gt;                        &lt;property name=&quot;dept&quot;&gt;                            &lt;bean id=&quot;dept&quot; class=&quot;com.atguigu.spring5.Dept&quot;&gt;                            &lt;property name=&quot;dname&quot; value=&quot;后勤部&quot;&gt;                            &lt;/property&gt;                            &lt;/bean&gt;                       &lt;/property&gt;                    &lt;/bean&gt;             ②级联赋值：                1.写法形同外部bean注入的xml编写格式，区别在于这个对外部bean进行了赋值，即可实现一对多赋值                                2.先给类属性写上get方法，后配置xml(优先级大于第一种形式)                    &lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;                    &lt;property name=&quot;dept.dname&quot; value = &quot;技术部&quot;&gt;&lt;/property&gt;        6.特殊数据类型属性的注入：            ①数组：&lt;property name=&quot;courses&quot;&gt;                                 &lt;array&gt;                                  &lt;value&gt;java&lt;/value&gt;                                  &lt;value&gt;c++&lt;/value&gt;                                  &lt;/array&gt;                              &lt;/property&gt;            ②Map：&lt;property name=&quot;maps&quot;&gt;                                     &lt;map&gt;                                         &lt;entry key=&quot;JAVA&quot; value=&quot;JAVA&quot;&gt;&lt;/entry&gt;                                      &lt;entry key=&quot;C++&quot; value=&quot;c++&quot;&gt;&lt;/entry&gt;                                      &lt;/map&gt;                                 &lt;/property&gt;            ③list：  &lt;property name=&quot;list&quot;&gt;                                     &lt;list&gt;                                     &lt;value&gt;java&lt;/value&gt;                                     &lt;value&gt;c#&lt;/value&gt;                                     &lt;/list&gt;                                &lt;/property&gt;        7.包含对象的特殊数据类型的注入            ①List：</code></pre><p><img src="Spring5%E6%88%AA%E5%9B%BE2.png"></p><pre><code>            ②如何提取注入部分并且使用？                1.设置util名称空间</code></pre><p><img src="%E6%88%AA%E5%9B%BE3.png"></p><pre><code>                2.提取注入部分</code></pre><p><img src="%E6%88%AA%E5%9B%BE4.png"></p><pre><code>                3.如何使用提取出来的注入                    3.1创建对象                        &lt;bean id=&quot;book&quot; class=&quot;com.atguigu.spring5.Book&quot;&gt;&lt;/bean&gt;                    3.2为对象注入信息                        &lt;property name=&quot;booklist&quot; ref=&quot;booklist&quot;&gt;&lt;/property&gt;                        注:第一个booklist是对象的属性名那个，第二个booklist是提取出来的可用来注入的名称    ②通过注解方式实现        1.什么是注解：            （1）注解是代码特殊标记，格式：@注解名称（属性名称=属性值，属性名称=属性值......）            （2）使用注解，注解可以作用在类上面，方法上面，属性上面            （3）使用注解的目的：简化xml配置        2.Spring针对Bean管理中创建对象提供注解            （1）@Component            （2）@Service            （3）@Controller            （4）@Repository            上面四种注解功能一致，都可以用来创建bean实例        3.基于注解方式实现对象创建            （1）导入jar包</code></pre><p><img src="%E6%88%AA%E5%9B%BE15.png"></p><pre><code>            （2）在配置文件中引入context名称空间                xmlns:context=&quot;http://www.springframework.org/schema/context&quot;                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd            （3）在配置文件中开启组件扫描（其中package包中包含你要使用的包名）                &lt;context:component-scan base-package=&quot;com.atguigu.spring5.testdemo,com.atguigu.spring5.dao,com.atguigu.spring5.service&quot;&gt;&lt;/context:component-scan&gt;            （4）使用注解为类创建实例对象（其中value值是xml中的id，不写value默认id取为第一个字母小写的类名，class是自动配置的当前路径）</code></pre><p><img src="%E6%88%AA%E5%9B%BE16.png"></p><pre><code>            （5）测试结果：</code></pre><p><img src="%E6%88%AA%E5%9B%BE17.png"></p><pre><code>            （6）注：可在组件扫描中设置具体扫描哪些类</code></pre><p><img src="%E6%88%AA%E5%9B%BE18.png"></p><pre><code>        4.基于注解为对象注入属性(例：)            ①Autowired（根据属性类型进行注入）：                  (1)  目标：通过UserService里的UserDao对象调用UserDao的add方法                （2）创建UserService类和UserDao类以及UserDaoImpl，以及在Service的UserDao属性前和UserDaoImpl添加创建对象注释</code></pre><p><img src="%E6%88%AA%E5%9B%BE20.png"><br><img src="%E6%88%AA%E5%9B%BE19.png"></p><pre><code>            （3）测试结果：</code></pre><p><img src="%E6%88%AA%E5%9B%BE21.png"></p><pre><code>            ②Qualifier（1.与Autowired一起使用 2.根据属性名称进行注入）：                （1）在@Autowired下面添加@Qualifier(valuev = &quot;实现类的名字&quot;);</code></pre><p><img src="%E6%88%AA%E5%9B%BE22.png"></p><pre><code>                （2）测试结果：</code></pre><p><img src="%E6%88%AA%E5%9B%BE23.png"></p><pre><code>3.Spring中存在的两种类型bean    ①.普通bean        返回类型就是它在配置文件中定义的bean类型</code></pre><p><img src="%E6%88%AA%E5%9B%BE5.png"><br><img src="%E6%88%AA%E5%9B%BE6.png"></p><pre><code>        如上图⬆    ②.工厂bean        返回类型与配置文件中定义的bean类型不一致        配置文件：         &lt;bean id=&quot;myBean&quot; class=&quot;com.atguigu.spring5.factorybean.MyBean&quot;&gt;            &lt;/bean&gt;        返回类型:                Course course = applicationContext.getBean(&quot;myBean&quot;,Course.class);                System.out.println(course);        如此区别的原因在于在MyBean类中实现了FactoryBean类，可以使用泛型同时与函数getObject返回其他的类型：        @Override            public Course getObject() throws Exception &#123;               Course course = new Course();                course.setCname(&quot;aaa&quot;);                return course;            &#125;4.bean的作用域：    ①.Spring中，bean实例存在单实例和多实例    ②.Spring中，默认bean实例为单实例对象(通过多次创建对象，输出地址可验证。若两次地址一致则为单实例反之。)</code></pre><p><img src="%E6%88%AA%E5%9B%BE7.png"></p><pre><code>    ③Spring中，可以设置bean实例为多实例对象        &lt;bean id=&quot;&quot; class=&quot;&quot; scope=&quot;singleton(单实例)/prototype(多实例)&quot;&gt;&lt;/bean&gt;</code></pre><p><img src="%E6%88%AA%E5%9B%BE8.png"></p><pre><code>    ④singleton和prototype的区别        第一：singleton在加载配置文件的时候就创建单实例对象，            ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean1.xml&quot;);                  prototype在调用getBean方法时才加载对象。                        Book book1 = applicationContext.getBean(&quot;book&quot;,Book.class);5.Bean的生命周期：    ①生命周期概念：对象从创建到销毁的过程。    ②bean的生命周期：        1. ---&gt;     第一步，构造器被执行了            第二步，属性设置被调用了            第三步，初始化函数被调用了(通过&lt;bean init-mathod=&quot;？&quot;&gt;&lt;/bean&gt; 调用)            第四步，获取创建的bean对象实例            com.atguigu.spring5.Bean.bean@2038ae61            第五步，销毁函数被调用了(通过&lt;bean destory-mathod=&quot;？&quot;&gt;&lt;/bean&gt; 调用)        2. ---&gt;     ①添加后置处理器后：                    第一步，构造器被执行了            第二步，属性设置被调用了            第三步，把bean实例传递给bean后置处理器的方法            第四步，初始化函数被调用了            第五步，把bean实例传递给bean后置处理器的方法            第六步，获取创建的bean对象实例            com.atguigu.spring5.Bean.bean@2038ae61            第七步，销毁函数被调用了(通过&lt;bean destory-mathod=&quot;？&quot;&gt;&lt;/bean&gt; 调用)            ②测试：先创建一个类作为后置处理器，该类需要实现BeanPostProcessor类</code></pre><p><img src="%E6%88%AA%E5%9B%BE9.png"><br>                              配置该处理器(附：配置过该处理器的配置文件中的所有的bean执行时都会调用这个处理器的方法)<br><img src="%E6%88%AA%E5%9B%BE10.png"><br>                              测试结果：<br><img src="%E6%88%AA%E5%9B%BE11.png"></p><pre><code>6.基于xml的自动装配：    ①什么是自动装配？        根据指定的装配规则(属性名称或属性类型)，Spring自动将匹配的属性值进行注入    ②操作流程:        1.创建两个类，其中一个类是另一个类的属性。</code></pre><p><img src="%E6%88%AA%E5%9B%BE12.png"><br>            2.在配置文件中如下配置(可选ByType或ByName，其中,ByType不能有bean两个同类型的实例，<br>                                        ByName中第二个实例的id必须和另一个类中定义的属性名一致)<br><img src="%E6%88%AA%E5%9B%BE13.png"><br>            3.测试结果。<br><img src="%E6%88%AA%E5%9B%BE14.png"></p><pre><code>7.外部文件引入(例：数据库连接池配置文件引入)    ①导入德鲁伊连接池的jar包    ②在配置文件中引入context名称空间        xmlns:context=&quot;http://www.springframework.org/schema/context&quot;        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd    ③创建jdbc.properties文件存放配置数据    ④引入外部属性文件        &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;    ⑤将配置连接池中的value改为用$&#123;&#125;获取</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一章：Spring框架概述：&lt;br&gt;  1.目的：Spring是为了解决繁琐的软件开发而创建的。&lt;/p&gt;
&lt;p&gt;  2.作用：解耦合，方便测试，集成框架，降低API(对JDBC等进行封装)开发难度。&lt;/p&gt;
&lt;p&gt;  3.特点：Spring不同于Struts、Hibern</summary>
      
    
    
    
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>初读设计模式</title>
    <link href="http://example.com/2021/10/28/%E5%88%9D%E8%AF%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/10/28/%E5%88%9D%E8%AF%BB%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-10-28T11:10:43.000Z</published>
    <updated>2021-10-28T11:12:38.996Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇：</p><hr><p>第二篇：</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一篇：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二篇：&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拯哥确实强</title>
    <link href="http://example.com/2021/10/27/%E6%8B%AF%E5%93%A5%E7%A1%AE%E5%AE%9E%E5%BC%BA/"/>
    <id>http://example.com/2021/10/27/%E6%8B%AF%E5%93%A5%E7%A1%AE%E5%AE%9E%E5%BC%BA/</id>
    <published>2021-10-27T10:52:37.000Z</published>
    <updated>2021-10-28T09:59:22.443Z</updated>
    
    <content type="html"><![CDATA[<p>第一章</p><p>—第二章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一章&lt;/p&gt;
&lt;p&gt;—第二章&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://example.com/2021/10/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>http://example.com/2021/10/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</id>
    <published>2021-10-27T10:52:37.000Z</published>
    <updated>2021-10-28T09:59:27.007Z</updated>
    
    <content type="html"><![CDATA[<p>第一章</p><hr><p>第二章</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一章&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;第二章&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/27/hello-world/"/>
    <id>http://example.com/2021/10/27/hello-world/</id>
    <published>2021-10-27T10:43:33.649Z</published>
    <updated>2021-10-27T10:43:33.649Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
